  module.exports = function(RED) {
	function ACSimulation(config) {
		RED.nodes.createNode(this,config);
		var node = this;
		var startTime = Date.now() / 1000; 
		
		console.log("init AC Simulation: " + this.name);
		this.status({fill:"green",shape:"dot",text:"ok"});

		node.on('input', function(msg) {
			let time = msg.payload /1000;
			let voltage = {};
			let current = {};
			let state = "ON";
			let period = 60;
			let vAmp = 1.0;
			let cAmp = 0;

			if(!(msg.vAmp === undefined)) 
				vAmp = Number(msg.vAmp);
			if(!(msg.cAmp === undefined)) 
				cAmp = Number(msg.cAmp);
			if(!(msg.period === undefined)) 
				period = Number(msg.period);
			if(!(msg.state === undefined)) 
				state = msg.state;
			
			if(state == "ON" || state == "on") {
				voltage = {payload: vAmp * Math.sin((2 * Math.PI ) * ((time - startTime) % period) / period), topic: "voltage" };
				current = {payload: cAmp * Math.cos((2 * Math.PI ) * ((time - startTime) % period) / period), topic: "current" };
			} else if(state == "OFF" || state == "off") {
				voltage = {payload: vAmp * Math.sin((2 * Math.PI ) * ((time - startTime) % period) / period), topic: "voltage" };
				current = {payload: 0, topic: "current"};
			} else if(state == "FAIL" || state == "fail") {
				voltage = {payload: vAmp/2 * Math.sin((2 * Math.PI ) * ((time - startTime) % period) / period), topic: "voltage" };
				current = {payload: 0, topic: "current"};
			}
				
			node.send([ voltage, current ]);
		});
	}
	RED.nodes.registerType("AC Simulation", ACSimulation);
}
